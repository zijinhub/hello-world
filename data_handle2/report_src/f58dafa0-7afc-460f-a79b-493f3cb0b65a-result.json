{"name": "test_sell_api[test_B001_danshi_basic_00_0000]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '100000' == '100329'\n  - 100000\n  + 100329", "trace": "per_sell_case = ({'code': '0031010305070911~01^', 'description': '单式-全奇-相同间隔-红球包含蓝球', 'id': 'test_B001_danshi_basic_00_0000', 'money': 62, ...}, {'BackCode': '100329', 'BackMsg': '销售时间校验不通过'}, '2020030')\n\n    @pytest.mark.run(order=1)\n    @pytest.mark.smoke\n    def test_sell_api(per_sell_case):\n        \"\"\"\n        1.下面的函数可以将数据库的备注动态的输入到allure的报告中，这个方法allure.dynamic，看官网通常是添加加到函数体内，使用函数内的数据动态生成；\n    它下面的方法使用和之前的都有一样，唯一多的就是他可以使用函数体内的数据\n        2.可以使用数据库中的caseid动态添加allure标签，\n        3.根据玩法名（playEname）allure.dynamic.feature(\"销售接口_\" + per_record['playEname'])、\n          投注方式（allure.dynamic.story(per_record['playEname'] + '_' + per_record['playType'] + '_case')）动态\n          生成报告中的层级结构\n        :param per_sell_case:test\n        :return:\n        \"\"\"\n        per_record, recv, sell_term_code = per_sell_case\n        allure.dynamic.feature(\"销售接口_\" + per_record['playEname'])\n        allure.dynamic.story(per_record['playEname'] + '_' + per_record['playType'] + '_case')\n        allure.dynamic.severity(allure.severity_level.CRITICAL)\n        allure.dynamic.description(\"用例信息：\" + \"期号：\" + sell_term_code + \"金额：\" +\n                                   str(per_record['money']) + \"    测试点：\" + per_record['description'])\n>       assert '100000' == recv['BackCode']\nE       AssertionError: assert '100000' == '100329'\nE         - 100000\nE         + 100329\n\ntestcase_set.py:32: AssertionError"}, "description": "用例信息：期号：2020030金额：62    测试点：单式-全奇-相同间隔-红球包含蓝球", "attachments": [{"name": "log", "source": "ddf4eab2-d81d-4eff-b1f6-e3756dcb4969-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "per_sell_case", "value": "{'id': 'test_B001_danshi_basic_00_0000', 'playEname': 'B001', 'playType': 'danshi', 'code': '0031010305070911~01^', 'money': 62, 'description': '单式-全奇-相同间隔-红球包含蓝球'}"}], "start": 1590655740210, "stop": 1590655740245, "uuid": "82d2481f-04f3-4b08-8025-d561426616ce", "historyId": "2113aa8d36c5bd7eee954fb8b39c6f33", "testCaseId": "d1572d2447d7948b475a455d450f59f1", "fullName": "data_handle2.testcase_set#test_sell_api", "labels": [{"name": "feature", "value": "销售接口_B001"}, {"name": "story", "value": "B001_danshi_case"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "data_handle2"}, {"name": "suite", "value": "testcase_set"}, {"name": "host", "value": "t37-pc2"}, {"name": "thread", "value": "4240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "data_handle2.testcase_set"}]}